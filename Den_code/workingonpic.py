from graph import *
import math as m
import random
import PIL
import math

updatings = []


def wleafs(leafs, maxR = 20, cs = ([70, 90, 70], [80, 100, 80], [90, 110, 90], [65, 85, 65], [105, 123, 86])):
    colors = []
    for ever in cs:
        colors.append('brushColor({0}, {1}, {2})'.format(ever[0], ever[1], ever[2]))
    i = 0
    while i < len(leafs)-1:
        exec(random.choice(colors))
        circle(int(leafs[i]), int(leafs[i + 1]), maxR * random.random())
        i += 2

def centralsin(N = 6, t = 1):
    global updatings
    for i in range(N):
        for x in range(10, xm - 9):
            penSize(random.choice([1, 2, 3, 4, 5]))
            penColor(70, 68, 47)
            obj = point(x, 100 * m.cos(0.007 * x + 12 * t) + 400 + 12 * i)
            updatings.append(obj)

def w_hairs(hair, maxR = 15):
    global updatings
    colors = ['brushColor(112, 87, 61)', 'brushColor(133, 102, 66)', 'brushColor(66, 49, 26)', 'brushColor(74, 54, 30)', 'brushColor(129, 97, 66)', "brushColor(133, 100, 66)"]
    brushColor(88, 60, 37)
    penSize(1)
    penColor('black')
    i = 0
    while i < len(hair):
        if i % 40 == 0:
            exec(random.choice(colors))
        obj = circle(int(hair[i])- random.choice([10, 20, 30, 40, 50]), int(hair[i + 1]), maxR * random.random())
        updatings.append(obj)
        i += 2




#отрисовка узоров в верхнем и нижнем окошках 

          
def beauty_sincos(M = 7, t1 = 1):
    global updatings
    for i in range(M):
        for x in range(10, xm-9):
            penSize(random.choice([1, 2, 3, 4, 5]))
            penColor(70, 68, 47)
            obj1 = point(x, 10 * m.sin(0.05 * x + 12*t1) + ym - 42 - 12 * i)
            updatings.append(obj1)

    for i in range(M-1):
        for x in range(10, xm-9):
            penSize(random.choice([1, 2, 3, 4, 5]))
            penColor(70, 68, 47)
            obj2 = point(x, 10 * m.cos(0.05 * x + 12* t1) + 25 + 12 * i)
            updatings.append(obj2)
            
#и спирали в центральном кружочке

def spiral():
    penSize(3)
    penColor(208, 131, 68)
    i = 0
    while i < 130:
        x = i * m.sin(i)
        y = i * m.cos(i)
        if i > 100:
            penColor(170, 95, 55)
        point((xm - 20) / 2 + x, (ym - 27) / 2 + y)
        i += 0.01
    penSize(1)

def remover(objects):
    for ever in objects:
        deleteObject(ever)
        

    


#установим изначальные характеристики окна
windowSize(736, 800)
canvasSize(736, 800)
xm = 736
ym = 800
X0 = (xm - 20) / 2
Y0 = (ym - 30) / 2
R0 = (xm - 200) / 2
# нарисуем рамки
brushColor(100, 100, 80)
rectangle(10, 10, xm - 10, 100)
rectangle(10, ym - 130, xm - 10, ym - 30)
rectangle(10, 110, xm - 10, ym - 140)
#нарисуем кружочки в середине картинки
brushColor(73, 102, 79)
circle(X0, Y0, R0)
brushColor(61, 39, 22)
circle(X0, Y0, R0)
brushColor(64, 73, 57)
circle(X0, Y0, R0 / 1.25)
brushColor(118, 133, 111)
circle(X0, Y0, R0 / 2)


brushColor(122, 138, 107)

circles = []
R_big = X0 * 0.55
# серия кружочков внутри центрального
circles.append(circle(X0*1.55, Y0, 35))
circles.append(circle(X0*1.5, Y0 + 70, 35))
circles.append(circle(X0*1.5, Y0 - 70, 35))
circles.append(circle(X0*1.4, Y0 - 133, 35))
circles.append(circle(X0*1.4, Y0 + 133, 35))

print(circles)

def small_circles(alpha, fi):
    global R_big, X0, Y0, circles
    for i in range (5):
        moveObjectTo(circles[i], X0+R_big*math.cos((i - 2)*alpha + fi) - 35, Y0+R_big*math.sin((i - 2)*alpha + fi) - 35)

fi_global = 0
def update():
    global updatings
    global iteration_number
    global fi_global
    
    fi_global += 0.4
    small_circles(0.4, fi_global)
    remover(updatings)
    w_hairs(hair)
    beauty_sincos(7, iteration_number)
    centralsin(6, 0.01*iteration_number)
    iteration_number += 1

beauty_sincos()
spiral()

face = image(150, 200, 'Face1.png')
eye = image(340, 245, 'eye.png')
ear = image(160, 210, 'face2.png')

#строка hairs содержит натыканные по картинке координаты, где должен располагаться кружочек-волос
hairs = '304 204 297 200 295 200 286 200 285 200 279 200 269 200 269 200 258 200 234 200 227 200 222 200 217 205 207 215 199 228 199 238 202 249 202 249 203 266 203 266 205 277 205 284 205 293 205 296 205 300 202 313 196 324 195 326 182 335 182 336 171 345 171 345 153 359 153 359 139 366 137 366 124 366 110 365 110 365 410 187 407 183 405 183 403 181 399 178 392 174 384 172 375 169 368 169 365 169 364 169 357 169 345 167 336 167 329 167 329 167 321 167 311 167 300 172 297 174 295 175 288 180 286 187 285 190 282 197 278 206 275 211 275 217 266 230 275 220 265 213 394 184 389 184 384 184 376 184 371 187 371 190 371 190 367 191 355 196 355 200 355 200 353 206 348 214 345 224 342 230 341 236 341 242 340 250 338 258 338 264 338 269 337 276 337 284 337 286 337 289 335 297 331 302 327 306 324 306 321 308 318 311 389 198 384 195 380 193 380 193 378 190 375 188 372 187 369 185 363 183 356 183 351 183 346 183 342 183 336 183 331 185 325 189 321 191 319 192 316 196 311 200 307 203 305 207 303 209 302 212 302 212 301 216 299 222 296 228 294 234 293 239 293 240 293 241 293 242 292 249 379 209 372 206 362 202 358 200 355 199 352 197 348 196 346 196 337 193 324 193 318 193 315 193 315 193 310 193 300 194 296 194 296 194 293 194 287 194 278 194 272 194 264 194 257 194 253 194 248 194 244 194 240 194 231 198 223 206 218 211 213 215 208 220 205 225 202 231 201 238 198 246 194 254 194 259 194 262 194 262 194 266 196 275 196 276 202 282 204 283 209 286 210 288 215 296 217 300 217 304 220 313 324 175 323 175 314 173 309 172 304 168 297 166 290 165 285 165 280 165 269 165 264 165 257 165 255 165 247 168 247 168 240 171 235 174 230 175 225 177 223 179 217 183 215 187 212 191 209 197 204 201 204 201 201 205 197 211 197 211 193 218 190 225 192 222 188 230 188 236 188 245 187 253 185 253 181 264 183 268 183 268 186 273 187 278 187 279 187 283 188 289 188 294 188 297 185 302 176 309 171 310 167 311 160 311 158 308 158 302 164 298 283 178 280 178 274 178 268 178 264 178 256 178 252 178 249 178 241 180 234 181 231 183 222 191 214 200 214 202 213 217 398 165 395 162 391 161 385 161 379 160 376 160 372 156 362 155 358 152 354 152 345 150 340 150 332 148 323 148 314 148 308 148 301 148 288 149 283 149 278 149 268 153 257 158 248 158 237 160 232 167 353 170 349 166 347 165 340 161 328 161 328 161 324 161 316 159 310 159 303 159 297 157 288 157 393 182 389 178 388 175 386 171 373 165 362 164 347 167 343 173 332 172 328 172 325 167 324 160 304 176 293 177 281 180 275 189 260 187 269 187 265 187 249 188 243 189 263 208 256 210 251 211 247 215 247 215 244 219 242 222 242 226 242 229 239 233 238 238 238 241 237 247 237 251 237 261 237 273 237 276 237 282 238 286 238 292 243 300 243 206 238 207 231 209 224 212 210 225 207 231 255 154 250 155 238 160 227 168 217 177 210 180 206 182 204 185 199 190 195 196 190 201 189 206 189 208 186 211 180 220 180 223 178 231 178 238 178 244 178 258 180 263 186 272 188 279 192 285 192 293 193 301 193 307 193 312 193 316 193 317 195 330 199 338 205 342 209 345 214 347 218 347 224 348 231 348 240 345 240 343 245 335 245 332 244 327 237 322 259 230 258 237 257 244 257 245 257 253 257 259 337 208 331 213 328 217 325 222 323 228 322 231 321 235 318 242 317 248 315 254 315 258 313 269 312 277 312 280 314 284 316 291 318 295 323 304 325 309 400 195 395 201 392 212 387 218 383 220 376 220 370 219 363 218 358 218 351 214 414 202 413 201 411 199 409 195 420 195 420 191 420 189 417 183 416 181 415 178 415 177 413 173 413 174 409 170 406 170 410 166 406 160 396 155 389 152 385 149 380 148 375 147 371 145 369 144 362 144 357 143 347 140 343 140 338 140 338 140 334 139 328 137 324 137 315 137 310 137 308 137 308 137 301 137 297 138 291 140 288 140 205 214 195 221 190 227 190 227 187 231 179 246 175 259 173 266 171 278 172 282 172 287 172 292 172 294 174 304 175 309 176 317 177 323 182 331 182 333 182 334 169 286 162 286 156 287 151 295 147 305 147 311 147 318 147 325 147 335 148 345 148 356 153 365 153 367 185 286 181 292 178 298 175 305 174 308 172 323 165 329 162 337 162 337 161 345 161 350 169 320 163 321 161 328 161 330 '
hair = hairs.split(' ')[:-1]
#строка hairs содержит натыканные по картинке координаты, где должен располагаться кружочек-волос
leafs = '308 254 303 277 286 304 267 328 247 328 254 366 232 379 196 384 204 416 198 428 182 464 176 446 168 419 170 385 158 401 191 403 193 379 194 365 212 364 186 368 232 352 222 334 223 319 256 305 258 284 256 263 247 260 281 270 283 295 277 323 277 345 261 372 240 400 231 407 216 407 215 383 215 439 216 432 231 432 227 449 205 476 202 482 198 490 193 479 188 479 181 470 167 473 162 487 154 493 151 504 140 479 130 483 129 488 144 476 128 470 120 465 119 452 115 442 110 440 117 432 135 420 139 413 144 435 129 456 139 459 157 460 167 445 181 436 187 423 186 451 178 452 175 458 191 460 209 469 203 471 201 446 184 445 190 443 209 457 214 473 216 474 298 349 250 395 247 404 207 366 304 352 304 345 300 337 300 330 299 316 299 306 323 258 326 249 307 241 284 235 253 238 243 254 243 264 280 262 271 252 256 249 290 256 278 269 273 266 278 296 278 313 258 345 251 302 247 305 336 227 357 221 296 352 285 357 282 361 369 220 392 210 407 203 256 222 281 214 305 217 290 219 326 209 340 207 368 202 353 233 354 234 326 272 323 282 284 250 '
leaf = leafs.split(' ')[:-1]


wleafs(leaf)


iteration_number = 1
onTimer(update, 50)
run()
